var documenterSearchIndex = {"docs": [

{
    "location": "index.html#",
    "page": "Home",
    "title": "Home",
    "category": "page",
    "text": ""
},

{
    "location": "index.html#wiki-1",
    "page": "Home",
    "title": "wiki",
    "category": "section",
    "text": "wiki(blog) generated by Documenter.jlDocumenter, a package for building documentation from docstrings and markdown files.note: Note\nPlease read through the Documentation section of the main Julia manual if this is your first time using Julia\'s documentation system. Once you\'ve read through how to write documentation for your code then come back here."
},

{
    "location": "index.html#Title-1",
    "page": "Home",
    "title": "Title",
    "category": "section",
    "text": "Write all your documentation in Markdown.\nMinimal configuration.\nSupports Julia 0.6 and 0.7-dev.c code#include<stdio.h>\n\nint main(int argc, char *argv[])\n{\n    char word[10];\n    puts(\"enter sth\");\n    while (fgets(word,10,stdin) != NULL && word[0] != \'\\n\')\n        fputs(word,stdout);\n    puts(\"done\");\n    return 0;\n}"
},

{
    "location": "LeetCode/twostring.html#",
    "page": "String",
    "title": "String",
    "category": "page",
    "text": ""
},

{
    "location": "LeetCode/twostring.html#String-1",
    "page": "String",
    "title": "String",
    "category": "section",
    "text": ""
},

{
    "location": "LeetCode/twostring.html#test-1",
    "page": "String",
    "title": "test",
    "category": "section",
    "text": ""
},

{
    "location": "LeetCode/twostring.html#add-and-product-of-two-numeric-string-1",
    "page": "String",
    "title": "add and product of two numeric string",
    "category": "section",
    "text": "#!/usr/bin/env julia\n\nfunction s_add(s1::String, s2::String)\n\n    !( all(isnumeric,s1) && all(isnumeric,s2) ) && error(\"xx\")\n\n    l1 = length(s1)\n    l2 = length(s2)\n    l  = max(l1,l2) + 1\n    v  = zeros(Int8,l)\n    \n    for i in 1:l-1\n        x1 = i<=l1 ? s1[l1+1-i] - \'0\' : 0\n        x2 = i<=l2 ? s2[l2+1-i] - \'0\' : 0\n        x = x1 + x2\n        if x >= 10\n            v[l+1-i] += x - 10\n            v[l-i]   += 1\n        else\n            v[l+1-i] += x\n        end\n    end\n\n    v[1] != 0 ? reduce(*,string.(v)) : reduce(*,string.(v[2:end]))\n\nendfunction s_mul(s1::String, s2::String)\n\n    !( all(isnumeric,s1) && all(isnumeric,s2) ) && error(\"xx\")\n\n    l1 = length(s1)\n    l2 = length(s2)\n    l  = l1 + l2\n    v  = zeros(Int8,l)\n    \n    for i1 in 1:l1\n        x1 = s1[l1+1-i1] - \'0\'\n        for i2 in 1:l2\n            x2 = s2[l2+1-i2] - \'0\'\n            v[l+2-i1-i2] += x1 * x2\n        end\n    end\n\n    for i in l:-1:1\n        x = v[i]\n        if x>10\n            v[i]    = x%10\n            v[i-1] += floor(Int8,x/10)\n        end\n    end\n\n    v[1] != 0 ? reduce(*,string.(v)) : reduce(*,string.(v[2:end]))\n\nendusing Test\n\n@testset \"s_add\" begin\n    @test s_add(\"1\",\"2\") == \"3\"\n    @test s_add(\"1\",\"9\") == \"10\"\n    @test s_add(\"11\",\"99\") == \"110\"\n    @test_throws ErrorException s_add(\"a\",\"2\")\nend\n\n@testset \"s_mul\" begin\n    @test s_mul(\"2\",\"3\") == \"6\"\n    @test s_mul(\"3\",\"7\") == \"21\"\n    @test_throws ErrorException s_mul(\"a\",\"2\")\nend"
},

]}
